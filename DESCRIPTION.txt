This software simulates a Darwinian process of evolving genotypes.
The process is driven by a stochastically fluctuating ``environment''
variable.  Some genotypes may recombine with others, mimicking the well-known
biological process of swapping genetic material.

I used Python for parsing parameters and creating plots.  The main
engine of simulating evolution comes from the C program
tree.c.  A brief technical description of this program
follows.

The basic unit used in tree.c is the node structure.

struct node
{
    /* Bit string representing genotype */
    bitstr bs;
    /* n is the number of this genotype in the population */
    uint32 n; 
    /* Nodes are either in the cache or in the tree,
     * never both, so unionize. */
    union
    {
        struct node *left;
        /* for cache */
        struct node *next;
    };
    struct node *right;
};

An iterative step in the Darwinistic process begins with an array of
``parent'' nodes.  A ``child'' is selected by drawing randomly from
this array, weighted by the value of n, or drawing two parents and
recombining.  A binary tree structure keeps track of the child
generation.  A new child is recorded by either:

    - Incrementing n by one if the genotypes is already in
    the tree, or
    - Inserting a new node.

After the tree is complete, it undergoes recursive destruction,
forming the parent array for the next generation.

To avoid excessive memory management related system calls or calls to
malloc and free, temporarily unused nodes are placed in a linked list
cache, which serves as a ``stack'' from which nodes can be pulled for
reuse.
